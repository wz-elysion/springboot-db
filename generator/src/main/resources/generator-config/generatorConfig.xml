<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <properties resource="generator-config/gconfig.properties"/>

    <context defaultModelType="flat" id="vssTables" targetRuntime="MyBatis3Simple">

        <!-- 生成的Java文件的编码-->
        <property name="javaFileEncoding" value="UTF-8"/>

        <!-- 格式化java代码-->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>

        <!-- 格式化XML代码-->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers"
                      value="tk.mybatis.mapper.common.Mapper,tk.mybatis.mapper.common.MySqlMapper"/>
            <property name="caseSensitive" value="true"/>
            <property name="forceAnnotation" value="true"/>
            <property name="beginningDelimiter" value="`"/>
            <property name="endingDelimiter" value="`"/>
        </plugin>

        <!--mapper接口-->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="baseMapper" value="com.megvii.dzh.campus.base.mapper.BaseMapper"/>
            <property name="targetProject" value="src/main/java"/>
            <property name="targetPackage" value="${target.package}.mapper"/>
            <property name="templatePath" value="file:${model.path}/mapper.ftl"/>
            <property name="mapperSuffix" value="Mapper"/>
            <property name="fileName" value="${tableClass.shortClassName}${mapperSuffix}.java"/>
            <property name="templateFormatter"
                      value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
        </plugin>

        <!-- model -->
        <plugin type="tk.mybatis.mapper.generator.TemplateFilePlugin">
            <property name="targetProject" value="src/main/java"/>
            <property name="targetPackage" value="${target.package}.model"/>
            <property name="templatePath" value="file:${model.path}/model.ftl"/>
            <property name="fileName" value="${tableClass.shortClassName}PO.java"/>
            <!--默认值是下面这个，可以不配置-->
            <property name="templateFormatter"
                      value="tk.mybatis.mapper.generator.formatter.FreemarkerTemplateFormatter"/>
        </plugin>


        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="addRemarkComments" value="true"/>
        </commentGenerator>

        <jdbcConnection connectionURL="${jdbc.url}"
                        driverClass="${jdbc.driver}"
                        password="${jdbc.password}"
                        userId="${jdbc.username}">
        </jdbcConnection>

        <!-- java类型处理器，用于处理DB中的类型到Java中的类型，默认使用JavaTypeResolverDefaultImpl -->
        <!-- 注意一点，默认会先尝试使用Integer，Long，Short等来对应DECIMAL和NUMERIC数据类型 -->
        <javaTypeResolver>
            <!-- true：使用BigDecimal对应DECIMAL和 NUMERIC数据类型-->
            <!-- false：默认 -->
            <!-- scale>0;length>18：使用BigDecimal -->
            <!-- scale=0;length[10,18]：使用Long -->
            <!-- scale=0;length[5,9]：使用Integer -->
            <!-- scale=0;length<5：使用Short -->
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <javaModelGenerator targetPackage="${target.package}.model"
                            targetProject="src/main/java">
            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="true"/>
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>
            <!--  for MyBatis3/MyBatis3Simple 自动为每一个生成的类创建一个构造方法，构造方法包含了所有的field；而不是使用setter -->
            <property name="constructorBased" value="true"/>
        </javaModelGenerator>

        <!-- 生成SQL map的XML文件生成器，-->
        <!-- 注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），或者只使用Mapper接口+Annotation，-->
        <!-- 所以，如果javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置 -->
        <!-- targetPackage/targetProject:同javaModelGenerator -->
        <sqlMapGenerator targetPackage="${target.package}.mapper" targetProject="src/main/java"/>


        <!--
            选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
            1，SQL map文件
            2，生成一个主键类；
            3，除了BLOB和主键的其他字段的类；
            4，包含BLOB的类；
            5，一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
            6，Mapper接口（可选）

            tableName（必要）：要生成对象的表名；
            注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会
                根据设置的schema，catalog或tablename去查询数据表，按照下面的流程：
                1，如果schema，catalog或tablename中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
                2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
                3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
                4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1，schema：数据库的schema；
            2，catalog：数据库的catalog；
            3，alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4，domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5，enableInsert（默认true）：指定是否生成insert语句；
            6，enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7，enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8，enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9，enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10，enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11，enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12，enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13，modelType：参考context元素的defaultModelType，相当于覆盖；
            14，delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15，delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
        -->
        <!-- 通过使用%通配符来匹配所有数据库表 -->
        <table tableName="vsr_camera">
            <generatedKey column="id" identity="true" sqlStatement="Mysql"/>
        </table>

        <!--<table tableName="camera_ctrl">-->
        <!--<generatedKey column="camera_id" identity="true" sqlStatement="Mysql"/>-->
        <!--</table>-->

        <!--<table tableName="camera_event">-->
        <!--<generatedKey column="id" identity="true" sqlStatement="Mysql"/>-->
        <!--</table>-->

        <!--<table tableName="camera_task">-->
        <!--<generatedKey column="id" identity="true" sqlStatement="Mysql"/>-->
        <!--&lt;!&ndash; 用来修改表中某个列的属性 &ndash;&gt;-->
        <!--&lt;!&ndash; 使用property属性来指定列要生成的属性名称 &ndash;&gt;-->
        <!--&lt;!&ndash; javaType用于指定生成的domain的属性类型，使用类型的全限定名 &ndash;&gt;-->
        <!--&lt;!&ndash; jdbcType用于指定该列的JDBC类型 &ndash;&gt;-->
        <!--<columnOverride column="begin_hour" javaType="java.lang.Integer"/>-->
        <!--<columnOverride column="close_hour" javaType="java.lang.Integer"/>-->
        <!--<columnOverride column="plan_type" javaType="java.lang.Integer"/>-->
        <!--</table>-->

        <!--<table tableName="camera_plan">-->
        <!--<generatedKey column="id" identity="true" sqlStatement="Mysql"/>-->
        <!--<columnOverride column="begin_hour" javaType="java.lang.Integer"/>-->
        <!--<columnOverride column="close_hour" javaType="java.lang.Integer"/>-->
        <!--<columnOverride column="plan_type" javaType="java.lang.Integer"/>-->
        <!--</table>-->

        <!--<table tableName="camera_video_map">-->
        <!--<generatedKey column="video_id" identity="true" sqlStatement="Mysql"/>-->
        <!--</table>-->
    </context>

</generatorConfiguration>
